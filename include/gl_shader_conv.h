#include "GLES.h"

#define _SHADER_HEADER_VERTEX                               \
        "// Vertex shader has been generated by GLinES\n"   \
        "#version 310 es\n"

#define _SHADER_HEADER_FRAGMENT                             \
        "// Vertex shader has been generated by GLinES\n"   \
        "#version 310 es\n"

#define _SHADER_HEADER_SECOND                               \
        "precision highp float; precision highp int; precision highp sampler3D;\n" \
        "\n#define attribute in\n#define varying out\n"     \
        "#define gl_FragData GLIN_FragData\n"               \
        "#define gl_Vertex GLIN_Vertex\n"                   \
        "#define gl_Normal GLIN_Normal\n"                   \
        "#define gl_Color GLIN_Color\n"                     \
        "#define gl_SecondaryColor GLIN_SColor\n"           \
        "#define gl_FrontColor GLIN_FColor\n"               \
        "#define gl_BackColor GLIN_BColor\n"                \
        "#define gl_FrontSecondaryColor GLIN_FSColor\n"     \
        "#define gl_BackSecondaryColor GLIN_BSColor\n"      \
        "#define texture2D texture\n"                       \
        "#define texture3D texture\n"                       \
        "#define textureCube texture\n"                     \
        "#define texture2DProj textureProj\n\n"             \

#define EXT_EN(__ext_name)                                  strcat(pszNewShaderSource, "#extension GL_" #__ext_name " : enable\n")
#define EXT_REQ(__ext_name)                                 strcat(pszNewShaderSource, "#extension GL_" #__ext_name " : require\n")
#define ADD(__what_to_add)                                  strcat(pszNewShaderSource, __what_to_add)

#define REPLACE(__what, __to_what)                          while ((temp = line.find(__what)) != std::string::npos) { \
                                                                line.replace(temp, sizeof(__what)-1, __to_what); }

#define REPLACE_BREAK(__what, __to_what)                    if (line.find(__what) != std::string::npos) { \
                                                                while ((temp = line.find(__what)) != std::string::npos) { \
                                                                    line.replace(temp, sizeof(__what)-1, __to_what); goto CONTINUE; } }

#define REPLACE2(__what, __what2, __to_what)                if (line.find(__what) != std::string::npos || line.find(__what2) != std::string::npos) { \
                                                                while ((temp = line.find(__what)) != std::string::npos) { \
                                                                    line.replace(temp, sizeof(__what2)-1, __to_what); } \
                                                                while ((temp = line.find(__what2)) != std::string::npos) { \
                                                                    line.replace(temp, sizeof(__what)-1, __to_what); } }

#define REPLACE2_BREAK(__what, __what2, __to_what)          if (line.find(__what) != std::string::npos || line.find(__what2) != std::string::npos) { \
                                                                while ((temp = line.find(__what)) != std::string::npos) { \
                                                                    line.replace(temp, sizeof(__what2)-1, __to_what); } \
                                                                while ((temp = line.find(__what2)) != std::string::npos) { \
                                                                    line.replace(temp, sizeof(__what)-1, __to_what); } goto CONTINUE; }

void WRAP(glCompileShader(GLuint shader));
GLuint WRAP(glCreateShader(GLenum type));
void WRAP(glUseProgram(GLuint program));

void PreprocessShader(char* pszShaderSource);
char* ConvertShader(char* pszShaderSource, bool bIsVertexShader);
char* ConvertARBShader(char* pszShaderSource, bool bIsVertexShader);