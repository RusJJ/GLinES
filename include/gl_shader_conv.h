#include "GLES.h"

#define _SHADER_HEADER_VERTEX                               \
        "// Vertex shader has been generated by GLinES \n"  \
        "#version 310 es"                                   \

#define _SHADER_HEADER2_VERTEX                              \
        "#define attribute in   \n"                         \
        "#define varying out    \n"                         \
        "precision highp float; \n"                         \
        "precision highp int;   \n"

#define _SHADER_HEADER_FRAGMENT                             \
        "// Vertex shader has been generated by GLinES \n"  \
        "#version 310 es"                                   \

#define _SHADER_HEADER2_FRAGMENT                            \
        "#define attribute in   \n"                         \
        "#define varying out    \n"                         \
        "precision highp float; \n"                         \
        "precision highp int;   \n"

#define EXT_EN(__ext_name)                  strcat(pszNewShaderSource,  "#extension GL_" #__ext_name " : enable\n")
#define EXT_REQ(__ext_name)                 strcat(pszNewShaderSource, "#extension GL_" #__ext_name " : require\n")
#define ADD(__what_to_add)                  strcat(pszNewShaderSource, __what_to_add)
#define REPLACE(__what, __to_what)          if ((temp = line.find(__what)) != std::string::npos) { \
                                            line.replace(temp, sizeof(__what)-1, __to_what); }
#define REPLACE_BREAK(__what, __to_what)    if ((temp = line.find(__what)) != std::string::npos) { \
                                            line.replace(temp, sizeof(__what)-1, __to_what); goto CONTINUE; }

void GLIN_Wrap_glCompileShader(GLuint shader);
GLuint GLIN_Wrap_glCreateShader(GLenum type);

void PreprocessShader(char* pszShaderSource);
void ConvertShader(char* pszShaderSource, bool bIsVertexShader, char* pszNewShaderSource);